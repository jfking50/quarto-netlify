---
title: "Simple Rating System"
description: "How football simple rating systems work. One sentence at a time."
author: "John King"
date: "2/14/2022"
format:
  html:
    toc: true
    code-fold: false
    code-tools: true
    code-copy: true
    df-print: paged
execute: 
  warning: false
  message: false
  echo: true
categories:
  - R
  - ggplot2
  - college football
  - sports analytics
image: "teaser.png"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Motivation

In my [last post](https://jfking.netlify/blog/oregon-football/), I was playing around with data from an API offered by <http://collegefootballdata.com>.

Then I found some blog posts on the site, and I thought a couple of them on how Simple Rating Systems work were interesting.

In particular, [this one](https://blog.collegefootballdata.com/talking-tech-bu/).

They did all their coding in Python, but I'm becoming more and more of an R fan, so I thought I'd re-code the wheel, so to speak.

In their post, they used data from the 2019 season, so for consistency, I'll do the same.

Also, in the last post, I was using `tidyr` to un-nest JSON data.

It seemed add to me that you have to do these repeated `unnest_auto()` steps to get things parsed out.

If it's automatic, why do I have to keep doing it manually?

After some more Googling, I found the [tidyjson](https://github.com/colearendt/tidyjson) package, which has a nice `spread_all` function that I'll use instead.

## Simple Rating System: The Math

This, to me, is the coolest part.

I had no idea this is how some rating systems work, and it's pretty slick.

It's just one big system of equations that you solve with regular 'ol linear algebra.

In other words, solve $Ax=b$.

That's it.

I'll start with the $b$ vector - that's easiest to explain.

### The b Vector

The $b$ vector is each team's average margin of victory for the season.

Couldn't be any simpler.

### The A Matrix

This is a little more complicated.

The $A$ matrix will have dimensions of 130x130 - one row and column for each FBS team.

The diagonal will be 1's (i.e., the identity matrix).

Think of the rest of the matrix in terms of rows.

We'll set it up alphabetically, so the first row will be for Air Force.

First, we'll count how many games Air Force played that season.

Then we'll identify all of Air Force's opponents - those are the columns.

As I said, the Air Force-Air Force entry will have a 1.

Moving across the columns, if Air Force *didn't* play that team, put a 0 there.

If they *did*, divide the number of times Air Force played that team by the total number of games played and put that value in the column.

Keep doing that until you get to the last column (i.e., that last potential match-up).

Then repeat that process for the next team, Akron, and then the next, etc.

That's it.

This matrix represents each team's strength of schedule.

Pretty clever, right?

A teams rating is it's mean margin of victory adjusted by it's strength of schedule.

## The Code

First we need to get all the FBS team names so we can exclude non-FBS games.

```{r}
library(tidyjson)
library(dplyr)
library(httr)
fbs <-
  httr::GET(
    url = "https://api.collegefootballdata.com/teams/fbs?year=2019",
    httr::add_headers(
      Authorization = paste("Bearer", Sys.getenv("CFDB_API_TOKEN"))
    )
  )

fbs_teams <- 
  httr::content(fbs, "parsed") %>% # convert response to a nested list
  spread_all %>% # rectangularize nested list into a dataframe
  arrange(school) # make sure teams are in alphabetical order
```

Now we'll get team win-loss records.

```{r}
records <- 
  httr::GET(
  url = "https://api.collegefootballdata.com/games?year=2019",
  httr::add_headers(
    accept = "application/json",
    Authorization = paste("Bearer", Sys.getenv("CFDB_API_TOKEN"))
  )
)

team_records <- 
  httr::content(records, "parsed")

team_records <- tibble(data=team_records)

team_records <- 
  team_records %>% 
  tidyr::unnest_auto(data)
```

Now get scores and margin of victory for each game and eliminate non-FBS games.

Eventually we'll use this for the $b$ vector, but first we'll need it in this format for the $A$ matrix.

```{r}
scores <- team_records %>% 
  filter(home_team %in% (fbs_teams %>% .$school) & 
           away_team %in% (fbs_teams %>% .$school)) %>%
  select(home_team, away_team, home_points, away_points) %>%
  mutate(home_mov = home_points - away_points)
head(scores)
```

Ok, now we can start to generate the $A$ matrix.

First, I'll populate it with the number of times each team faced each other.

There's probably a more elegant way, but this is what came to me first.

```{r}
A <- data.frame(diag(0, nrow=130, ncol=130), 
                row.names = fbs_teams %>% .$school)
colnames(A) <- fbs_teams %>% .$school

# populate dataframe with 
for (r in 1:nrow(scores)){
  home <- scores[r, 1] %>% .$home_team
  away <- scores[r, 2] %>% .$away_team
  A[home, away] <- A[home, away] + 1
  A[away, home] <- A[away, home] + 1
}

# clean up
rm(away, home, r)

A[1:6, 1:6]
```

Hold that thought on the $A$ matrix - we need a little more work to proceed.

Next, rearrange the `scores` data to get one margin of victory score for each team and each game.

```{r}
mov <- scores %>% 
  select(home_team, home_mov) %>% 
  rename(team = home_team, mov = home_mov) %>% 
  bind_rows(scores %>% 
              select(away_team, home_mov) %>% 
              rename(team = away_team, mov = home_mov) %>% 
              mutate(mov = -mov))
```

Now count the total number of games each team played.

```{r}
n_games <- mov %>% count(team) %>% .$n
```

Multiply $A$'s columns by $1 / n_games$.

`MARGIN=1` specifies to sweep across columns.

```{r}
A <- sweep(A, 1/n_games, MARGIN=1, FUN =`*`)
```

Finally, add the identity matrix and $A$ is built.

```{r}
A <- A + diag(1, nrow=130, ncol=130)
A[1:6, 1:6]
```

Now calculate the mean margin of victory for each team.

This is the $b$ vector for the system of equations.

```{r}
b <- 
  mov %>%
  group_by(team) %>% 
  summarize(mean_mov = mean(mov)) %>%
  .$mean_mov
```

It took a while to build the system of equations, but solving it is a one-liner.

```{r}
solve(A, b)
```

If you're familiar with linear models in R, this bit of code does the same thing.

Don't forget to include a -1 to drop the intercept term.

```{r}
lm_A <- cbind(A, b)
coefficients(lm(b ~ . -1 , data=lm_A))
```

To visualize the ratings, let's make a plot of the top 25.

```{r}
library(ggplot2)
library(forcats)

srs <- 
  tibble(team = fbs_teams$school,
         rating = solve(A, b),
         color = fbs_teams$color)

top_25 <- 
  srs %>% 
  arrange(desc(rating)) %>% 
  slice(1:25)

ggplot() +
  geom_col(data = top_25, 
           aes(x = fct_reorder(team, rating), y = rating), 
           fill = top_25$color) +
  coord_flip() +
  theme_bw() +
  ylab("Rating") +
  xlab("Team")
```

In the College Football Data blog, they further refine the rating by factoring in home field advantage, conference strength, and things like that.

That's fine, but I just wanted to get the basic mechanics down.
