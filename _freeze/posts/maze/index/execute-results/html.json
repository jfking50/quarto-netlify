{
  "hash": "3195efa7a3daa5e70fa67430c705b797",
  "result": {
    "markdown": "---\ntitle: \"Maze Generator\"\ndescription: \"A stochastic method for generating mazes.\"\nauthor: \"John King\"\ndate: \"5/29/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-tools: true\n    code-copy: true\n    df-print: paged\nexecute: \n  warning: false\n  message: false\n  echo: true\ncategories:\n  - R\n  - ggplot2\n  - generative art\nimage: \"maze.png\"\n---\n\n\nThis generative art seems less artsy to me, but the idea of generating a maze was interesting. I found the [mazegenerator](https://github.com/matfmc/mazegenerator) GitHub repo that described the algorithm simply as a random walk and displayed a .gif of the maze being incrementally created. It's straight forward enough that that bit of information and a visual is all you need to figure it out.\n\n## Generate the Data\n\nThe way this algorithm works is that you choose the dimensions of the maze and a random starting spot for the maze path to begin. I started with a 20x20 grid, which I represented as a 20x20 matrix of 0s (`m`) and a starting point of row 1, column 2 (`r_start` and `c_start` below). When the maze path is \"drawn\" on a grid coordinate, I change the corresponding matrix value of 0 to a 1. This is how I keep track of where in the grid I have and have not visited. For plotting purposes, I know I'll have to keep track of each path segment, so I create a counter `s_start`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# crate the maze matrix\nmaze_size <- 20\nm <- matrix(0, nrow=maze_size, ncol=maze_size)\n\n# choose a starting position\nr_start <- 1; c_start <- 2\n# segment counter\ns_count <- 1\n\nm[1, 2] <- 1 # change starting position value\n\nset.seed(2)\n```\n:::\n\n\nFrom the starting point, I'm going to randomly pick a direction to move in. Valid moves are either up, down, left, or right - no diagonal moves are allowed in a maze. At each step, I know I'll need to check what are the valid next moves. The `get_valid_moves()` function returns a `valid` vector of length 4. I initialize the vector with all FALSE values. If a move up is valid (doesn't take me off the board or to a position that's already been visited), I change the first index to TRUE. Same thing with down, left, and right which are stored in the 2nd, 3rd, and 4th index positions.\n\nNext is the `get_segment()` function. I keep track of all of the row and column pairs visited with vectors `ro` and `co`. For convenience, the `idx` variable just keeps track of the length of these vectors, so I can save some typing. After getting length, I check for valid moves from that position. If there aren't any, the `get_valid_moves()` function returns a vector of all FALSE values, and that's the criteria to break out of the `repeat` loop. Otherwise, I randomly sample from the available valid moves using the index of the TRUE values in the `valid_moves` vector. For example, if up and left are the only valid moves, `valid_moves` will contain `(TRUE, FALSE, TRUE, FALSE)`, and so I randomly sample either index 1 or 3.\n\nI discovered that the `sample()` function doesn't behave as I expected if there's only one TRUE index. The help for `sample()` confirms this:\n\n::: callout-note\nIf x has length 1, is numeric (in the sense of is.numeric) and x \\>= 1, sampling via sample takes place from 1:x. Note that this convenience feature may lead to undesired behaviour when x is of varying length in calls such as sample(x).\n:::\n\nIn other words if `valid_moves` is `(FALSE, FALSE, FALSE, TRUE)`, then `which(valid_moves) = 4` and then `sample(4)` will sample the vector `1:4` instead of just returning 4. Not what I want, so that's the reason for the `ifelse()` statement. The rest of the function just adds the new row and column values to the `ro` and `co` vectors and updates the maze matrix value for the corresponding new move. Once the segment gets stuck somewhere because a lack of a valid move, the `ro` and `co` vectors and the segment number are put in a dataframe and returned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_valid_moves <- function(rw, cl, maze){\n    valid <- rep(FALSE, 4) #up, down, left, right\n    if (rw > 1) if(m[rw-1, cl] != 1) valid[1] <- TRUE     # up\n    if (rw < maze) if(m[rw+1, cl] != 1) valid[2] <- TRUE  # down\n    if (cl > 1) if(m[rw, cl-1] != 1) valid[3] <- TRUE     # left\n    if (cl < maze) if(m[rw, cl+1] != 1) valid[4] <- TRUE  # right\n    valid\n}\n\nget_segment <- function(ro, co, sg, maze){\n  \n  repeat{\n    idx <- length(ro)\n    # check for valid moves\n    valid_moves <- get_valid_moves(ro[idx], co[idx], maze)\n    \n    if (sum(valid_moves) == 0) break # end of the sequence\n    \n    # note: if only one valid move, sample misbehaves\n    move <- ifelse(sum(valid_moves) == 1, which(valid_moves), sample(which(valid_moves), 1))\n    \n    if (move == 1){\n      ro <- c(ro, ro[idx] - 1)\n      co <- c(co, co[idx])}\n    if (move == 2){\n      ro <- c(ro, ro[idx] + 1)\n      co <- c(co, co[idx])}\n    if (move == 3){\n      ro <- c(ro, ro[idx])\n      co <- c(co, co[idx] - 1)}\n    if (move == 4){\n      ro <- c(ro, ro[idx])\n      co <- c(co, co[idx] + 1)}\n    \n    m[ro[idx+1], co[idx+1]] <<- 1\n  }\n  \n  return(data.frame(x=co, y=ro, seg=sg))\n}\n\ndf <- get_segment(r_start, c_start, s_count, maze_size)\n\nhead(df)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"seg\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2\",\"2\":\"1\",\"3\":\"1\",\"_rn_\":\"1\"},{\"1\":\"2\",\"2\":\"2\",\"3\":\"1\",\"_rn_\":\"2\"},{\"1\":\"3\",\"2\":\"2\",\"3\":\"1\",\"_rn_\":\"3\"},{\"1\":\"3\",\"2\":\"3\",\"3\":\"1\",\"_rn_\":\"4\"},{\"1\":\"2\",\"2\":\"3\",\"3\":\"1\",\"_rn_\":\"5\"},{\"1\":\"1\",\"2\":\"3\",\"3\":\"1\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAt this point I have a matrix with one maze segment that got stuck somewhere. Let's visualize it to make sure nothing's wonky.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(theme_bw())\n\nggplot(df) +\n  geom_path(aes(x=x, y=y, group=seg), size=5, linejoin = \"mitre\", lineend = \"square\") +\n  coord_fixed() +\n  xlim(1, maze_size) + ylim(1, maze_size)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nRecall the segment started at row 1 and column 2, so that translates into plotting at x=2, y=1 in the lower left. Following the segment from there, we see that it wandered around, stayed in bounds (yay!), and eventually trapped itself.\n\nThat seemed to work as expected, so now what? Now I need to pick a starting point for the next path segment. After watching the .gif I mentioned, I noticed that the next segment always started somewhere along the black line where there is a valid adjacent move. Seems like I ought to be able to pick a spot randomly to start from - again, as long as there's an adjacent valid move.\n\nThe `while` loop below just needs a few lines to finish the maze. I get valid next starting positions by finding which indices of the `m` matrix are 1, and then I check which of those indices have a valid adjacent move. I randomly sample from these and pass the row and column number to the `get_segment()` function. Once all matrix values are 1, the loop stops.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\nlibrary(dplyr)\n\nwhile (sum(m) < maze_size^2){\n  # get the indices of 1 values from the m matrix\n  ones <- data.frame(which(m==1, arr.ind=TRUE)) \n  # get the indices that have an open adjacent position\n  ones$open <- map2(ones[, 1], ones[, 2], ~sum(get_valid_moves(.x, .y, maze_size))>0) %>% unlist()\n  # filter out the blocked positions\n  ones <- ones[ones$open, ]\n  # get a random new starting position\n  if (nrow(ones) > 1) ones <- ones[sample(nrow(ones), 1), ]\n  \n  s_count <- s_count + 1\n  df <- bind_rows(df, get_segment(ones$row, ones$col, s_count, maze_size))\n}\n```\n:::\n\n\n## Visualizations\n\nHere's the complete maze. I switched color schemes to be more like what you'd see on a piece of paper - a maze where you follow the white paths. Looks great, I think!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df) +\n  geom_path(aes(x=x, y=y, group=seg), \n            color = \"white\", size=5, linejoin = \"mitre\", lineend = \"square\") +\n  coord_fixed() +\n  theme_void() +\n  theme(panel.background = element_rect(fill = 'black', color = 'black'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nBefore I continue, this is a good spot to recreate the .gif I saw. I'll use the `gganimate` package to display the maze as it's generated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nanim <- \n  df %>% mutate(frame = row_number()) %>%\n  ggplot() +\n  geom_path(aes(x=x, y=y, group=seg), \n            color = \"white\", size=2, linejoin = \"mitre\", lineend = \"square\") +\n  coord_fixed() +\n  theme_void() +\n  theme(panel.background = element_rect(fill = 'black', color = 'black')) +\n  transition_reveal(frame)\n\nanimate(anim, end_pause=20, res=300, nframes=nrow(df) + 20)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.gif)\n:::\n:::\n\n\nHow about a bigger maze? Let's try 50x50.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaze_size <- 50\nm <- matrix(0, nrow=maze_size, ncol=maze_size)\nr_start <- 1; c_start <- 2; s_count <- 1\nm[1, 2] <- 1\ndf <- get_segment(r_start, c_start, s_count, maze_size)\n\nwhile (sum(m) < maze_size^2){\n  ones <- data.frame(which(m==1, arr.ind=TRUE)) \n  ones$open <- map2(ones[, 1], ones[, 2], ~sum(get_valid_moves(.x, .y, maze_size))>0) %>% unlist()\n  ones <- ones[ones$open, ]\n  if (nrow(ones) > 1) ones <- ones[sample(nrow(ones), 1), ]\n  s_count <- s_count + 1\n  df <- bind_rows(df, get_segment(ones$row, ones$col, s_count, maze_size))\n}\n\nggplot(df) +\n  geom_path(aes(x=x, y=y, group=seg), \n            color = \"white\", size=2, linejoin = \"mitre\", lineend = \"square\") +\n  coord_fixed() +\n  theme_void() +\n  theme(panel.background = element_rect(fill = 'black', color = 'black'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=768}\n:::\n:::\n\n\nThe [aRtsy](https://github.com/koenderks/aRtsy) package shows a maze plotted in polar coordinates, which is a cool effect. I noticed that the author made the \"spokes\" of the maze increase in size as they extended toward the perimeter. I'll try to recreate that here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\ndf <- df %>% \n  mutate(s = ifelse(y != lead(y), y/20, 0.5))\n\nggplot(df) +\n  geom_path(aes(x=x, y=y, group=seg), \n            size = df$s, \n            color = \"black\", linejoin = \"mitre\", lineend = \"square\") +\n  coord_polar() +\n  theme_void() +\n  theme(panel.background = element_rect(fill = 'white', color = 'white'))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n\nYou can [click here](https://cxxidemo.shinyapps.io/genart/) for my Shiny app to generate your own art using this and other algorithms. Enjoy!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}