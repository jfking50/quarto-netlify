{
  "hash": "4ab1b6f5092b14e0a99f2bd19845f4c9",
  "result": {
    "markdown": "---\ntitle: \"Adjusted Statistics\"\ndescription: \"Adjusted statistics for college football teams based on strength of schedule.\"\nauthor: \"John King\"\ndate: \"3/20/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-tools: true\n    code-copy: true\n    df-print: paged\nexecute: \n  warning: false\n  message: false\n  echo: true\ncategories:\n  - R\n  - ggplot2\n  - college football\n  - sports analytics\nimage: \"teaser.gif\"\n---\n\n\n\n\nThe idea for this post started off as essentially a replication of [this post](https://blog.collegefootballdata.com/opponent-adjusted-stats-ridge-regression/) but using R and Tidymodels instead of Python. Once I got that done, I had an idea of making an animated plot instead of the static plot at the end of the post I referenced. I also wanted to get that code worked out because I noticed that a couple of animated images in a tutorial I had written weren't rendering.\n\n## Get the Data\n\nI'm not going to go through all the detail about why I'm going through these steps because, again, it's just re-creating what was done in the above link. In a nutshell, I'm going to calculate adjusted offense and defense scores for FBS college football teams based on each team's strength of schedule week by week through the 2021 season.\n\nI'm also not going to go over making API calls because 1) I covered that [here](https://jfking.netlify.app/posts/oregon-football/), and 2) I've already downloaded that data and saved it to disk. You can see the code necessary for the API calls commented out, but really I'm just reading the data from disk that I saved earlier. The first data set `games` is basic information about each game of the season.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(httr)\nlibrary(tidyjson)\nlibrary(tidymodels)\nlibrary(tidyr)\n\n# get game info for 2021\n# df <-\n#   httr::GET(\n#     url = \"https://api.collegefootballdata.com/games?year=2021\",\n#     httr::add_headers(\n#       Authorization = paste(\"Bearer\", Sys.getenv(\"YOUR_API_TOKEN\"))))\n# \n# games21 <- tibble(data = content(df, \"parsed\")) %>% unnest_wider(data)\n# \n# rm(df)\n# \n# games21 <-\n#   games21 %>%\n#   select(id, season, week, neutral_site, home_team, home_conference, home_pregame_elo,\n#          away_team, away_conference, away_pregame_elo)\n# \n# saveRDS(games21, \"games21.RData\")\n\ngames <- readRDS(\"games21.RData\")\n\nhead(games)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"season\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"week\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"neutral_site\"],\"name\":[4],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"home_team\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"home_conference\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"home_pregame_elo\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"away_team\"],\"name\":[8],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"away_conference\"],\"name\":[9],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"away_pregame_elo\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"401282714\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"FALSE\",\"5\":\"Illinois\",\"6\":\"Big Ten\",\"7\":\"1393\",\"8\":\"Nebraska\",\"9\":\"Big Ten\",\"10\":\"1503\"},{\"1\":\"401286187\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"FALSE\",\"5\":\"Fresno State\",\"6\":\"Mountain West\",\"7\":\"1464\",\"8\":\"Connecticut\",\"9\":\"American Athletic\",\"10\":\"1223\"},{\"1\":\"401309833\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"FALSE\",\"5\":\"UCLA\",\"6\":\"Pac-12\",\"7\":\"1517\",\"8\":\"Hawai'i\",\"9\":\"Mountain West\",\"10\":\"1466\"},{\"1\":\"401282049\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"FALSE\",\"5\":\"New Mexico State\",\"6\":\"FBS Independents\",\"7\":\"1261\",\"8\":\"UTEP\",\"9\":\"Conference USA\",\"10\":\"1222\"},{\"1\":\"401310693\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"FALSE\",\"5\":\"San Jos√© State\",\"6\":\"Mountain West\",\"7\":\"NA\",\"8\":\"Southern Utah\",\"9\":\"NA\",\"10\":\"NA\"},{\"1\":\"401282050\",\"2\":\"2021\",\"3\":\"1\",\"4\":\"TRUE\",\"5\":\"Jacksonville State\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"UAB\",\"9\":\"Conference USA\",\"10\":\"NA\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nThen I get a dataset that identifies which teams are FBS teams, so I can filter out the games against non-FBS opponents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the ID of non-FBS games\n# fbs_teams <-\n#   httr::GET(\n#     url = \"https://api.collegefootballdata.com/teams/fbs?year=2021\",\n#     httr::add_headers(\n#       Authorization = paste(\"Bearer\", Sys.getenv(\"YOUR_API_TOKEN\"))))\n# \n# fbs <- \n#   tibble(data = content(fbs_teams, \"parsed\")) %>% \n#   unnest_wider(data) %>% \n#   unnest_wider(logos) %>%\n#   rename(\"logo\" = \"...1\", \"logo2\" = \"...2\") %>%\n#   select(-location)\n# \n# saveRDS(fbs, \"fbs_teams.RData\")\n# rm(fbs_teams)\n\nfbs <- readRDS(\"fbs_teams.RData\")\n\nfbsIDs <- \n  games %>% \n  filter(home_team %in% (fbs %>% .$school) & \n         away_team %in% (fbs %>% .$school)) %>% .$id\n\ngames <- games %>% filter(id %in% fbsIDs)\n```\n:::\n\n\nThe last dataset contains play-by-play statistics for each games. I'm primarily interested in the `ppa` column, which is the predicted points added of each play and apparently is the same thing as EPA - expected points added. I also do some manipulation to account for home field advantage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get PBP data\n# for (wk in 1:max(games$week)){\n#   print(wk)\n#   df <-\n#     httr::GET(\n#       url = paste0(\"https://api.collegefootballdata.com/plays?year=2021&week=\", as.character(wk)),\n#       httr::add_headers(\n#         Authorization = paste(\"Bearer\", Sys.getenv(\"YOUR_API_TOKEN\"))))\n#   \n#   if (wk == 1){pbp21 <- tibble(data = content(df, \"parsed\")) %>% unnest_wider(data)}\n#   else{pbp21 <- pbp21 %>% bind_rows(tibble(data = content(df, \"parsed\")) %>% unnest_wider(data))}\n# }\n# \n# rm(df, wk)\n# saveRDS(pbp21, \"pbp21.RData\")\n\npbp21 <- readRDS(\"pbp21.RData\")\n\npbp21 <-\n  pbp21 %>% \n  filter(game_id %in% fbsIDs) %>%\n  select(game_id, offense, defense, home, ppa) %>% \n  drop_na() %>%\n  left_join(games %>% \n              select(id, neutral_site, week), \n            by = c(\"game_id\" = \"id\")) %>%\n  mutate(\n    hfa = case_when(\n      home == offense ~ 1,\n      home == defense ~ -1),\n    hfa = ifelse(neutral_site, 0, hfa)) %>%\n  select(offense, hfa, defense, ppa, week) %>%\n  mutate_if(is.character, factor)\n\npbp21 <- pbp21 %>% mutate(ppa = as.numeric(as.character(ppa)))\n\nhead(pbp21)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"offense\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"hfa\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"defense\"],\"name\":[3],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"ppa\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"week\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"-0.2957674\",\"5\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"-0.5594317\",\"5\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"2.1760537\",\"5\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"0.9945701\",\"5\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"0.5750428\",\"5\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0\",\"3\":\"Miami\",\"4\":\"0.1358791\",\"5\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Ridge Regression\n\nThis block of code loops over the weeks of the season, tunes and fits a ridge regression model for each week. The regression model for week 1 includes all week 1 play-by-play data, the week 2 model includes week 1 and 2, and so on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the model\nlm_mod <- \n  linear_reg(penalty = tune(), mixture = 0) %>% \n  set_engine(\"glmnet\")\n\n# hyperparameter tuning grid\nlambda_grid <- tibble(penalty = c(0, 10^seq(-2, 2, length.out = 25)))\n\n# loop through the weeks\nfor (wk in 1:15){\n  \n  # define the recipe\n  lm_rec <-\n    recipe(ppa ~ ., data = pbp21 %>% filter(week <= wk) %>% select(-week)) %>%\n    step_dummy(all_nominal_predictors(), one_hot = TRUE)\n  \n  # cread cross-validation folds\n  folds <- vfold_cv(pbp21 %>% filter(week <= wk) %>% select(-week), v = 5)\n  \n  # define the workflow\n  lm_wflow <- \n    workflow() %>% \n    add_model(lm_mod) %>% \n    add_recipe(lm_rec)\n  \n  # get the tuning results\n  lm_res <- \n    lm_wflow %>% \n    tune_grid(\n      resamples = folds,\n      grid = lambda_grid,\n      control = control_grid(save_pred = TRUE)\n    )\n  \n  # get the model with the lowest root mean squared error\n  lowest_rmse <- lm_res %>% select_best(\"rmse\")\n  \n  # finalize the workflow with the best model\n  lm_final_wf <- \n    lm_wflow %>% \n    finalize_workflow(lowest_rmse)\n  \n  # get the final fit\n  lm_final_fit <- \n    lm_final_wf %>%\n    fit(pbp21 %>% filter(week <= wk) %>% select(-week)) \n  \n  # extract the coefficients\n  adjStats <- \n    broom::tidy(lm_final_fit) %>%\n    separate(term, into = c(\"side\", \"team\"), sep = \"_\", fill = \"left\") %>%\n    select(-penalty)\n  \n  # separate the intercept and home field advantage coefficients\n  otherTerms <- \n    adjStats %>% \n    slice(1:2) %>% \n    select(-side)\n  \n  # get the remaining coefficients \n  adjStats <- \n    adjStats %>% \n    slice(3:nrow(adjStats))\n  \n  # add the intercept term to the other coefficients\n  adjStats <- \n    adjStats %>% \n    mutate(estimate = estimate + otherTerms %>% \n             filter(team == \"(Intercept)\") %>% .$estimate)\n  \n  # fix team name formatting (Oregon.State to Oregon State)\n  adjStats <- \n    adjStats %>% \n    mutate(team = stringr::str_replace_all(team, \"\\\\.\", \" \"))\n  \n  # make dataframe wider\n  adjStats <- \n    adjStats %>% \n    pivot_wider(names_from = side, values_from = estimate) %>%\n    rename(\"adjOff\" = \"offense\", \"adjDef\" = \"defense\")\n  \n  # get the unadjusted (raw) stats - although I don't need this for the plot later\n  rawOff <- \n    pbp21 %>% \n    group_by(offense) %>% \n    summarize(meanPPA = mean(ppa)) %>%\n    rename(\"team\" = \"offense\", \"rawOff\" = \"meanPPA\")\n  \n  # same thing for raw defense\n  rawDef <- \n    pbp21 %>% \n    group_by(defense) %>% \n    summarize(meanPPA = mean(ppa)) %>%\n    rename(\"team\" = \"defense\", \"rawDef\" = \"meanPPA\")\n  \n  # bind everything together into one dataframe\n  if (wk == 1){\n    df <- \n      adjStats %>% \n      left_join(rawOff, by = \"team\") %>% \n      left_join(rawDef, by = \"team\") %>% \n      mutate(week = wk)}\n  else{\n    df_new <- \n      adjStats %>% \n      left_join(rawOff, by = \"team\") %>% \n      left_join(rawDef, by = \"team\") %>% \n      mutate(week = wk)\n    \n    df <- df %>% bind_rows(df_new)\n  }\n}\n\nhead(df)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"team\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"adjOff\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"adjDef\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rawOff\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"rawDef\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"week\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Air Force\",\"2\":\"0.1844619\",\"3\":\"0.1844619\",\"4\":\"0.27230255\",\"5\":\"0.16648435\",\"6\":\"1\"},{\"1\":\"Akron\",\"2\":\"0.1858009\",\"3\":\"0.2694837\",\"4\":\"0.14150425\",\"5\":\"0.45951305\",\"6\":\"1\"},{\"1\":\"Alabama\",\"2\":\"0.2075700\",\"3\":\"0.1586892\",\"4\":\"0.32014123\",\"5\":\"0.06608840\",\"6\":\"1\"},{\"1\":\"Appalachian State\",\"2\":\"0.2079424\",\"3\":\"0.1869491\",\"4\":\"0.25594591\",\"5\":\"0.05759602\",\"6\":\"1\"},{\"1\":\"Arizona\",\"2\":\"0.1731581\",\"3\":\"0.1937970\",\"4\":\"0.04044697\",\"5\":\"0.24789436\",\"6\":\"1\"},{\"1\":\"Arizona State\",\"2\":\"0.1844619\",\"3\":\"0.1844619\",\"4\":\"0.29622519\",\"5\":\"0.12749504\",\"6\":\"1\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Animated Plot\n\nNow the visualization. I'll use `gganimate` to animate the plot and `ggimage` to render team icons on the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gganimate)\nlibrary(ggimage)\n```\n:::\n\n\nPerforming ridge regression caused a team names to get messed up if they had non alphanumeric characters, so I'll fix that. There's also no week 0 to use as a starting point, so to get them roughly centered, I'll just set them as the mean of week 1 stats. Lastly, I add the links to the team logos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <-\n  df %>% mutate(team = case_when(\n  team == \"Hawai i\" ~ \"Hawai'i\",\n  team == \"Miami  OH \" ~ \"Miami (OH)\",\n  team == \"Texas A M\" ~ \"Texas A&M\",\n  TRUE ~ team\n))\n\n# Add a week 0\ndf <-\n  tibble(team = fbs$school,\n         adjOff = df %>% filter(week == 1) %>% .$adjOff %>% mean(),\n         adjDef = df %>% filter(week == 1) %>% .$adjDef %>% mean(),\n         rawOff = 0,\n         rawDef = 0,\n         week = 0) %>% \n  bind_rows(df)\n\n# add logos\ndf <- df %>% \n  left_join(fbs %>% select(school, logo), by = c(\"team\" = \"school\"))\n```\n:::\n\n\nTo generate the plots with team logos, I use `geom_image()`, and the last 5 lines are used by `gganimate` in a later code chunk. This block of code is fast to execute.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstats_plot <-\n  ggplot(df, aes(x=adjOff, y=adjDef)) +\n  geom_image(aes(image = logo, group = seq_along(logo))) +\n  theme_bw() +\n  scale_y_reverse() +\n  xlab(\"Adjusted Offense\") +\n  ylab(\"Adjusted Defense\") +\n  ggtitle(\"Week {closest_state}\") +\n  transition_states(week, transition_length = 3, state_length = 3, wrap = FALSE) +\n  ease_aes(\"linear\")\n```\n:::\n\n\nFinally I'll create the animated gif. It took my laptop about 15 minutes to generate the graphic. One thing that could be improved for efficiency is that the `logo` column contains URLs for the team logos. There are 130 logos and 16 weeks (including week 0), so I'm getting the same 130 logos 16 times when I should only need to get them once. I haven't worked out how to solve that yet, but for now at least I have something that works.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanimate(stats_plot, \n        width = 800, height = 800, \n        fps = 10, nframes = 90, end_pause = 10)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.gif)\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}