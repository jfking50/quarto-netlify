{
  "hash": "d9217dbb7943dd17884deb52740fe461",
  "result": {
    "markdown": "---\ntitle: \"Simple Rating System\"\ndescription: \"How football simple rating systems work. One sentence at a time.\"\nauthor: \"John King\"\ndate: \"2/14/2022\"\nformat:\n  html:\n    toc: true\n    code-fold: false\n    code-tools: true\n    code-copy: true\n    df-print: paged\nexecute: \n  warning: false\n  message: false\n  echo: true\ncategories:\n  - R\n  - ggplot2\n  - college football\n  - sports analytics\nimage: \"teaser.png\"\n---\n\n\n\n\n## Motivation\n\nIn my [last post](https://jfking.netlify/posts/oregon-football/), I was playing around with data from an API offered by <http://collegefootballdata.com>.\n\nThen I found some blog posts on the site, and I thought a couple of them on how Simple Rating Systems work were interesting.\n\nIn particular, [this one](https://blog.collegefootballdata.com/talking-tech-bu/).\n\nThey did all their coding in Python, but I'm becoming more and more of an R fan, so I thought I'd re-code the wheel, so to speak.\n\nIn their post, they used data from the 2019 season, so for consistency, I'll do the same.\n\nAlso, in the last post, I was using `tidyr` to un-nest JSON data.\n\nIt seemed add to me that you have to do these repeated `unnest_auto()` steps to get things parsed out.\n\nIf it's automatic, why do I have to keep doing it manually?\n\nAfter some more Googling, I found the [tidyjson](https://github.com/colearendt/tidyjson) package, which has a nice `spread_all` function that I'll use instead.\n\n## Simple Rating System: The Math\n\nThis, to me, is the coolest part.\n\nI had no idea this is how some rating systems work, and it's pretty slick.\n\nIt's just one big system of equations that you solve with regular 'ol linear algebra.\n\nIn other words, solve $Ax=b$.\n\nThat's it.\n\nI'll start with the $b$ vector - that's easiest to explain.\n\n### The b Vector\n\nThe $b$ vector is each team's average margin of victory for the season.\n\nCouldn't be any simpler.\n\n### The A Matrix\n\nThis is a little more complicated.\n\nThe $A$ matrix will have dimensions of 130x130 - one row and column for each FBS team.\n\nThe diagonal will be 1's (i.e., the identity matrix).\n\nThink of the rest of the matrix in terms of rows.\n\nWe'll set it up alphabetically, so the first row will be for Air Force.\n\nFirst, we'll count how many games Air Force played that season.\n\nThen we'll identify all of Air Force's opponents - those are the columns.\n\nAs I said, the Air Force-Air Force entry will have a 1.\n\nMoving across the columns, if Air Force *didn't* play that team, put a 0 there.\n\nIf they *did*, divide the number of times Air Force played that team by the total number of games played and put that value in the column.\n\nKeep doing that until you get to the last column (i.e., that last potential match-up).\n\nThen repeat that process for the next team, Akron, and then the next, etc.\n\nThat's it.\n\nThis matrix represents each team's strength of schedule.\n\nPretty clever, right?\n\nA teams rating is it's mean margin of victory adjusted by it's strength of schedule.\n\n## The Code\n\nFirst we need to get all the FBS team names so we can exclude non-FBS games.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyjson)\nlibrary(dplyr)\nlibrary(httr)\nfbs <-\n  httr::GET(\n    url = \"https://api.collegefootballdata.com/teams/fbs?year=2019\",\n    httr::add_headers(\n      Authorization = paste(\"Bearer\", Sys.getenv(\"CFDB_API_TOKEN\"))\n    )\n  )\n\nfbs_teams <- \n  httr::content(fbs, \"parsed\") %>% # convert response to a nested list\n  spread_all %>% # rectangularize nested list into a dataframe\n  arrange(school) # make sure teams are in alphabetical order\n```\n:::\n\n\nNow we'll get team win-loss records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecords <- \n  httr::GET(\n  url = \"https://api.collegefootballdata.com/games?year=2019\",\n  httr::add_headers(\n    accept = \"application/json\",\n    Authorization = paste(\"Bearer\", Sys.getenv(\"CFDB_API_TOKEN\"))\n  )\n)\n\nteam_records <- \n  httr::content(records, \"parsed\")\n\nteam_records <- tibble(data=team_records)\n\nteam_records <- \n  team_records %>% \n  tidyr::unnest_auto(data)\n```\n:::\n\n\nNow get scores and margin of victory for each game and eliminate non-FBS games.\n\nEventually we'll use this for the $b$ vector, but first we'll need it in this format for the $A$ matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores <- team_records %>% \n  filter(home_team %in% (fbs_teams %>% .$school) & \n           away_team %in% (fbs_teams %>% .$school)) %>%\n  select(home_team, away_team, home_points, away_points) %>%\n  mutate(home_mov = home_points - away_points)\nhead(scores)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"home_team\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"away_team\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"home_points\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"away_points\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"home_mov\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"Florida\",\"2\":\"Miami\",\"3\":\"24\",\"4\":\"20\",\"5\":\"4\"},{\"1\":\"Hawai'i\",\"2\":\"Arizona\",\"3\":\"45\",\"4\":\"38\",\"5\":\"7\"},{\"1\":\"Cincinnati\",\"2\":\"UCLA\",\"3\":\"24\",\"4\":\"14\",\"5\":\"10\"},{\"1\":\"Tulane\",\"2\":\"Florida International\",\"3\":\"42\",\"4\":\"14\",\"5\":\"28\"},{\"1\":\"Clemson\",\"2\":\"Georgia Tech\",\"3\":\"52\",\"4\":\"14\",\"5\":\"38\"},{\"1\":\"Texas A&M\",\"2\":\"Texas State\",\"3\":\"41\",\"4\":\"7\",\"5\":\"34\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nOk, now we can start to generate the $A$ matrix.\n\nFirst, I'll populate it with the number of times each team faced each other.\n\nThere's probably a more elegant way, but this is what came to me first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- data.frame(diag(0, nrow=130, ncol=130), \n                row.names = fbs_teams %>% .$school)\ncolnames(A) <- fbs_teams %>% .$school\n\n# populate dataframe with \nfor (r in 1:nrow(scores)){\n  home <- scores[r, 1] %>% .$home_team\n  away <- scores[r, 2] %>% .$away_team\n  A[home, away] <- A[home, away] + 1\n  A[away, home] <- A[away, home] + 1\n}\n\n# clean up\nrm(away, home, r)\n\nA[1:6, 1:6]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Air Force\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Akron\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Alabama\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Appalachian State\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Arizona\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Arizona State\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"_rn_\":\"Air Force\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"_rn_\":\"Akron\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"_rn_\":\"Alabama\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"0\",\"_rn_\":\"Appalachian State\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0\",\"6\":\"1\",\"_rn_\":\"Arizona\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"1\",\"6\":\"0\",\"_rn_\":\"Arizona State\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nHold that thought on the $A$ matrix - we need a little more work to proceed.\n\nNext, rearrange the `scores` data to get one margin of victory score for each team and each game.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmov <- scores %>% \n  select(home_team, home_mov) %>% \n  rename(team = home_team, mov = home_mov) %>% \n  bind_rows(scores %>% \n              select(away_team, home_mov) %>% \n              rename(team = away_team, mov = home_mov) %>% \n              mutate(mov = -mov))\n```\n:::\n\n\nNow count the total number of games each team played.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_games <- mov %>% count(team) %>% .$n\n```\n:::\n\n\nMultiply $A$'s columns by $1 / n_games$.\n\n`MARGIN=1` specifies to sweep across columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- sweep(A, 1/n_games, MARGIN=1, FUN =`*`)\n```\n:::\n\n\nFinally, add the identity matrix and $A$ is built.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- A + diag(1, nrow=130, ncol=130)\nA[1:6, 1:6]\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"Air Force\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Akron\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Alabama\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Appalachian State\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Arizona\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Arizona State\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0.00000000\",\"6\":\"0.00000000\",\"_rn_\":\"Air Force\"},{\"1\":\"0\",\"2\":\"1\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0.00000000\",\"6\":\"0.00000000\",\"_rn_\":\"Akron\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"1\",\"4\":\"0\",\"5\":\"0.00000000\",\"6\":\"0.00000000\",\"_rn_\":\"Alabama\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"1\",\"5\":\"0.00000000\",\"6\":\"0.00000000\",\"_rn_\":\"Appalachian State\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"1.00000000\",\"6\":\"0.09090909\",\"_rn_\":\"Arizona\"},{\"1\":\"0\",\"2\":\"0\",\"3\":\"0\",\"4\":\"0\",\"5\":\"0.09090909\",\"6\":\"1.00000000\",\"_rn_\":\"Arizona State\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nNow calculate the mean margin of victory for each team.\n\nThis is the $b$ vector for the system of equations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- \n  mov %>%\n  group_by(team) %>% \n  summarize(mean_mov = mean(mov)) %>%\n  .$mean_mov\n```\n:::\n\n\nIt took a while to build the system of equations, but solving it is a one-liner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsolve(A, b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Air Force                 Akron               Alabama \n          12.17488262          -22.66408637           32.60720600 \n    Appalachian State               Arizona         Arizona State \n          21.80515687          -13.03736947            1.10205537 \n             Arkansas        Arkansas State                  Army \n         -24.46835876           -0.52637216            1.05006201 \n               Auburn            Ball State                Baylor \n           5.88613703            0.40799928           14.36295601 \n          Boise State        Boston College         Bowling Green \n          17.32564683           -2.78480549          -33.10414546 \n              Buffalo                   BYU            California \n          10.20151104            0.46092289           -6.46928285 \n     Central Michigan             Charlotte            Cincinnati \n          10.31277888           -4.34284716            7.36008829 \n              Clemson      Coastal Carolina              Colorado \n          41.48627376            0.83014089          -11.45324149 \n       Colorado State           Connecticut                  Duke \n          -2.51297888          -22.92597291          -10.33694277 \n        East Carolina      Eastern Michigan               Florida \n         -12.21872118           -2.75282448           12.69160016 \n     Florida Atlantic Florida International         Florida State \n           8.62463543            1.37276246           -6.07744689 \n         Fresno State               Georgia      Georgia Southern \n           0.50823966           15.23789346           -1.56619791 \n        Georgia State          Georgia Tech               Hawai'i \n          -2.53872623          -20.00376049            0.03002992 \n              Houston              Illinois               Indiana \n         -11.22633847            5.83248366            6.84673009 \n                 Iowa            Iowa State                Kansas \n          10.19598383            8.32429892          -17.55664637 \n         Kansas State            Kent State              Kentucky \n           9.86298135           -0.90629641           11.16790944 \n              Liberty             Louisiana      Louisiana Monroe \n          11.38026279           14.12089636          -10.96010135 \n       Louisiana Tech            Louisville                   LSU \n          19.83837303          -11.11555104           24.61782878 \n             Marshall              Maryland               Memphis \n          -4.53506310          -21.13126417           16.67762020 \n                Miami            Miami (OH)              Michigan \n           3.40729287           -9.17435086            9.40439559 \n       Michigan State      Middle Tennessee             Minnesota \n          -2.84667123           -5.41633827           14.54830499 \n    Mississippi State              Missouri                  Navy \n         -10.04679640            5.12551526           14.51847575 \n             NC State              Nebraska                Nevada \n         -10.13346295           -1.06634224          -10.70442169 \n           New Mexico      New Mexico State        North Carolina \n         -18.96441796          -26.88151749            1.61200847 \n          North Texas     Northern Illinois          Northwestern \n          -1.33040741           -5.75767308           -9.39415805 \n           Notre Dame                  Ohio            Ohio State \n          21.22221810           10.59616933           36.35622851 \n             Oklahoma        Oklahoma State          Old Dominion \n          15.82512098            3.23809017          -14.57638255 \n             Ole Miss                Oregon          Oregon State \n          -0.47404615           20.18886699           -6.91414098 \n           Penn State            Pittsburgh                Purdue \n          13.07833337           -4.24030653           -4.44792009 \n                 Rice               Rutgers       San Diego State \n          -7.94447288          -27.74865910           11.75886571 \n       San José State                   SMU         South Alabama \n          -0.51222213           14.52255973          -17.50751350 \n       South Carolina         South Florida  Southern Mississippi \n         -20.16977658          -15.55091539           -3.01895055 \n             Stanford              Syracuse                   TCU \n         -10.41277836           -5.93538233           -1.45957680 \n               Temple             Tennessee                 Texas \n           2.25488829           -4.03217697            1.54246752 \n            Texas A&M           Texas State            Texas Tech \n           0.24533392          -19.98074165           -2.56724537 \n               Toledo                  Troy                Tulane \n          -9.23735051           -1.27992009           -1.44073888 \n                Tulsa                   UAB                   UCF \n          -9.98788905            7.89737667           22.70582261 \n                 UCLA                 UMass                  UNLV \n          -9.73407669          -28.89607277          -12.08819590 \n                  USC        UT San Antonio                  Utah \n           3.58662283          -18.39429259           20.89793643 \n           Utah State                  UTEP            Vanderbilt \n          -9.99000619          -13.81130518          -22.07917803 \n             Virginia         Virginia Tech           Wake Forest \n           1.72160891            8.58302730            1.14879646 \n           Washington      Washington State         West Virginia \n           8.68703548            7.56504382          -12.05131807 \n     Western Kentucky      Western Michigan             Wisconsin \n          11.04805953           10.09365243           11.70814611 \n              Wyoming \n          10.07670372 \n```\n:::\n:::\n\n\nIf you're familiar with linear models in R, this bit of code does the same thing.\n\nDon't forget to include a -1 to drop the intercept term.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_A <- cbind(A, b)\ncoefficients(lm(b ~ . -1 , data=lm_A))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            `Air Force`                   Akron                 Alabama \n            12.17488262            -22.66408637             32.60720600 \n    `Appalachian State`                 Arizona         `Arizona State` \n            21.80515687            -13.03736947              1.10205537 \n               Arkansas        `Arkansas State`                    Army \n           -24.46835876             -0.52637216              1.05006201 \n                 Auburn            `Ball State`                  Baylor \n             5.88613703              0.40799928             14.36295601 \n          `Boise State`        `Boston College`         `Bowling Green` \n            17.32564683             -2.78480549            -33.10414546 \n                Buffalo                     BYU              California \n            10.20151104              0.46092289             -6.46928285 \n     `Central Michigan`               Charlotte              Cincinnati \n            10.31277888             -4.34284716              7.36008829 \n                Clemson      `Coastal Carolina`                Colorado \n            41.48627376              0.83014089            -11.45324149 \n       `Colorado State`             Connecticut                    Duke \n            -2.51297888            -22.92597291            -10.33694277 \n        `East Carolina`      `Eastern Michigan`                 Florida \n           -12.21872118             -2.75282448             12.69160016 \n     `Florida Atlantic` `Florida International`         `Florida State` \n             8.62463543              1.37276246             -6.07744689 \n         `Fresno State`                 Georgia      `Georgia Southern` \n             0.50823966             15.23789346             -1.56619791 \n        `Georgia State`          `Georgia Tech`               `Hawai'i` \n            -2.53872623            -20.00376049              0.03002992 \n                Houston                Illinois                 Indiana \n           -11.22633847              5.83248366              6.84673009 \n                   Iowa            `Iowa State`                  Kansas \n            10.19598383              8.32429892            -17.55664637 \n         `Kansas State`            `Kent State`                Kentucky \n             9.86298135             -0.90629641             11.16790944 \n                Liberty               Louisiana      `Louisiana Monroe` \n            11.38026279             14.12089636            -10.96010135 \n       `Louisiana Tech`              Louisville                     LSU \n            19.83837303            -11.11555104             24.61782878 \n               Marshall                Maryland                 Memphis \n            -4.53506310            -21.13126417             16.67762020 \n                  Miami            `Miami (OH)`                Michigan \n             3.40729287             -9.17435086              9.40439559 \n       `Michigan State`      `Middle Tennessee`               Minnesota \n            -2.84667123             -5.41633827             14.54830499 \n    `Mississippi State`                Missouri                    Navy \n           -10.04679640              5.12551526             14.51847575 \n             `NC State`                Nebraska                  Nevada \n           -10.13346295             -1.06634224            -10.70442169 \n           `New Mexico`      `New Mexico State`        `North Carolina` \n           -18.96441796            -26.88151749              1.61200847 \n          `North Texas`     `Northern Illinois`            Northwestern \n            -1.33040741             -5.75767308             -9.39415805 \n           `Notre Dame`                    Ohio            `Ohio State` \n            21.22221810             10.59616933             36.35622851 \n               Oklahoma        `Oklahoma State`          `Old Dominion` \n            15.82512098              3.23809017            -14.57638255 \n             `Ole Miss`                  Oregon          `Oregon State` \n            -0.47404615             20.18886699             -6.91414098 \n           `Penn State`              Pittsburgh                  Purdue \n            13.07833337             -4.24030653             -4.44792009 \n                   Rice                 Rutgers       `San Diego State` \n            -7.94447288            -27.74865910             11.75886571 \n       `San José State`                     SMU         `South Alabama` \n            -0.51222213             14.52255973            -17.50751350 \n       `South Carolina`         `South Florida`  `Southern Mississippi` \n           -20.16977658            -15.55091539             -3.01895055 \n               Stanford                Syracuse                     TCU \n           -10.41277836             -5.93538233             -1.45957680 \n                 Temple               Tennessee                   Texas \n             2.25488829             -4.03217697              1.54246752 \n            `Texas A&M`           `Texas State`            `Texas Tech` \n             0.24533392            -19.98074165             -2.56724537 \n                 Toledo                    Troy                  Tulane \n            -9.23735051             -1.27992009             -1.44073888 \n                  Tulsa                     UAB                     UCF \n            -9.98788905              7.89737667             22.70582261 \n                   UCLA                   UMass                    UNLV \n            -9.73407669            -28.89607277            -12.08819590 \n                    USC        `UT San Antonio`                    Utah \n             3.58662283            -18.39429259             20.89793643 \n           `Utah State`                    UTEP              Vanderbilt \n            -9.99000619            -13.81130518            -22.07917803 \n               Virginia         `Virginia Tech`           `Wake Forest` \n             1.72160891              8.58302730              1.14879646 \n             Washington      `Washington State`         `West Virginia` \n             8.68703548              7.56504382            -12.05131807 \n     `Western Kentucky`      `Western Michigan`               Wisconsin \n            11.04805953             10.09365243             11.70814611 \n                Wyoming \n            10.07670372 \n```\n:::\n:::\n\n\nTo visualize the ratings, let's make a plot of the top 25.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(forcats)\n\nsrs <- \n  tibble(team = fbs_teams$school,\n         rating = solve(A, b),\n         color = fbs_teams$color)\n\ntop_25 <- \n  srs %>% \n  arrange(desc(rating)) %>% \n  slice(1:25)\n\nggplot() +\n  geom_col(data = top_25, \n           aes(x = fct_reorder(team, rating), y = rating), \n           fill = top_25$color) +\n  coord_flip() +\n  theme_bw() +\n  ylab(\"Rating\") +\n  xlab(\"Team\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nIn the College Football Data blog, they further refine the rating by factoring in home field advantage, conference strength, and things like that.\n\nThat's fine, but I just wanted to get the basic mechanics down.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}