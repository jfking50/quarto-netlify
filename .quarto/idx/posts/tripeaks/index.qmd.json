{"title":"Tripeaks Solver","markdown":{"yaml":{"title":"Tripeaks Solver","description":"A stochastic method for solving tripeaks games.","author":"John King","date":"7/2/2022","format":{"html":{"toc":true,"code-fold":false,"code-tools":true,"code-copy":true,"df-print":"paged"}},"execute":{"warning":false},"categories":["R","Data Visualization","ggplot2"],"image":"tripeaks.png"},"headingText":"The Algorithm","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nlibrary(Cairo)\n\nknitr::opts_chunk$set(\n  echo = TRUE,\n  message=FALSE, \n  warning=FALSE,\n  dev.args = list(png = list(type = \"cairo\"))\n  )\n```\n\nDuring COVID-19 brain fog, I had just enough mental capacity to play *a lot* of Microsoft Solitaire games. I found that TriPeaks on master and grandmaster difficulty gave me more trouble than the others. You have to find just the right combination of *not* clearing cards from the board, and at times, it would take me an annoyingly long time to find that magical combination. As the brain fog cleared, I decided to write some code to take care of those pesky games, and this is it.\n\nTo address the elephant in the room: yes, this is completely cheating! On the other hand,\n\n::: {#fig-seth}\n<iframe src=\"https://giphy.com/embed/mJhRSYXxzq6CA0ldkh\" width=\"240\" height=\"240\" frameBorder=\"0\" class=\"giphy-embed\" allowFullScreen>\n\n</iframe>\n\n[via GIPHY](https://giphy.com/)\n:::\n\nAnyway, the method I came up with requires me to input all of the cards manually, which means I have to at least expose all of the cards, write them all down, and type them into my console. The point is, this will solve a board, but it won't win any speed contests.\n\n\nMy first thought about how to go about this was to try and keep track of all possible branches of possible moves and grind through them all until I found a solution. That seemed like a lot of work, so I thought about a different approach. As I clear a board the first time, I have a general strategy, but with the more difficult levels, I almost never clear the board on the first attempt. It feels a bit random about which cards to clear or leave on the board for later, so why not embrace the randomness? Instead of keeping track of all possible moves, I just randomly select among the available moves (including not making a move at all). Depending on the level of randomness, it turns out, this method can clear a board in 20 attempts, on average. A lot less than I expected!\n\nLet's get to it. The first thing we need are the cards, so I create two vectors: one for the stock cards at the bottom `stock`, and one for the main board `board_orig`. For the stock, I put the cards in order from top to bottom (or, from right to left based on the Microsoft Solitaire layout). For the board, I start at the lower left, and go left to right across the bottom row, then left to right across each successively higher row.\n\n```{r}\n# right to left (i.e., top to bottom)\nstock <- c(3,9,12,2,2,8,3,10,11,10,6,13,7,12,11,12,1,11,5,8,6,3,6,11)\n\n# by row, starting at the lower left\nboard_orig <- c(\n  5, 9, 1, 2, 7, 4, 13, 9, 7, 3,\n  5, 6, 8, 7, 4, 9, 4, 13, 13, \n  2, 10, 12, 5, 8, 1, \n  1, 10, 4\n)\n```\n\nBefore I get to the main script, I wrote one function `get_viz_idx()` that takes the board vector as input and returns a vector of the board indices that are currently visible. As I mention below, when a card from the board is cleared, I replace it with a 0 in the `board` vector. I take advantage of that to determine what the remaining cards are. Then, starting with the bottom row, I see what cards remain in that row. Based on what remains in the bottom row, I can then determine what cards are visible in the next higher row. I apply that same logic to the 3rd and 4th rows and then return a vector containing the indices of visible cards.\n\n```{r}\nget_viz_idx <- function(bd){\n  remain <- bd != 0          # boolean for the remaining cards\n  r1 <- which(remain[1:10])  # indices of remaining bottom row (row 1) cards\n  r2 <- c()                  # second from bottom row, etc.\n  r3 <- c()\n  r4 <- c()\n  \n  r2_filter <- remain[1:10] # check row 1 to see what's visible in row 2\n  for (i in 1:(length(r2_filter)-1)){\n    if(!r2_filter[i] & !r2_filter[i+1] & remain[i+10] != 0){\n      r2 <- c(r2, i+10)}\n  }\n  r3_filter <- remain[11:19] # check row 2 to see what's visible in row 3\n  for (i in 1:(length(r3_filter)-1)){\n    if(!r3_filter[i] & !r3_filter[i+1] & remain[i+19] != 0 & i <= 2){\n      r3 <- c(r3, i+19)}\n    if(i == 3 | i == 6) next\n    if(!r3_filter[i] & !r3_filter[i+1] & remain[i+18] != 0 & (i == 4 | i == 5)){\n      r3 <- c(r3, i+18)}\n    if(!r3_filter[i] & !r3_filter[i+1] & remain[i+17] != 0 & i > 6){\n      r3 <- c(r3, i+17)}\n  }\n  r4_filter <- remain[20:25] # check row 3 to see what's visible in row 4\n  for (i in c(1,3,5)){\n    if(!r4_filter[i] & !r4_filter[i+1] & remain[i+25] != 0 & i == 1){\n      r4 <- c(r4, i+25)}\n    if(!r4_filter[i] & !r4_filter[i+1] & remain[i+24] != 0 & i == 3){\n      r4 <- c(r4, i+24)}\n    if(!r4_filter[i] & !r4_filter[i+1] & remain[i+23] != 0 & i == 5){\n      r4 <- c(r4, i+23)}\n  }\n  viz <- c(r1, r2, r3, r4) # combine indices of visible cards into one vector\n  viz\n}\n```\n\nFor the main script, I put everything in a nested `while()` loop. Each pass through the outer loop is an attempt at solving the game. As I mentioned, when a card is cleared from the board, I change the card to a 0, so the loop keeps going as long as there are less than 28 zeros in the board vector. I also added a counter `count` to keep track of how many attempts have been made. If it reaches 1000, then I'm fairly certain the board is unsolvable, and the loop will stop.\n\nI keep track of a game's history with `history()`. If the next move is to remove a card from the stock, I add a 0. Otherwise, I add the index of the board vector cleared.\n\nThe inner loop will stop when there are no stock cards left, and the comments should explain the rest of the logic.\n\n```{r}\n\nboard <- board_orig  # make a copy of the original board.\ncount <- 0           # attempt counter\n\nwhile (sum(board==0) != 28 & count <= 1000){\n  \n  board <- board_orig\n  history <- c()    # 0 if draw from stock, else index of board played\n  idx_played <- c() # helps keeps track of what cards are visible\n  stock_count <- 1  # the current stock card index  \n  card <- stock[stock_count] # the current card being considered for a move\n  \n  while(stock_count <= 24){\n    if(is.null(idx_played)){ # at the start of a game, \n      viz_idx <- 1:10        # the visible board indices are 1:10\n    }else{ # otherwise call a function to get the visible board indices\n        viz_idx <- get_viz_idx(board)\n        } \n    \n    # get indices for all valid moves\n    if (card == 1) {  # allows for wrap-aound if card is an Ace\n      poss_next <- \n        viz_idx[c(which(board[viz_idx] == card + 12), \n                  which(board[viz_idx] == card + 1))]}\n    if (card == 13) { # allows for wrap-aound if card is a King\n      poss_next <-\n        viz_idx[c(which(board[viz_idx] == card - 12), \n                  which(board[viz_idx] == card - 1))]}\n    if (card > 1 & card < 13) {\n      poss_next <- \n        viz_idx[c(which(board[viz_idx] == card - 1), \n                  which(board[viz_idx] == card + 1))]}\n    \n    # if no available card to remove or randomly choose not to clear it,\n    # then advance to next stock card\n    if (length(poss_next) == 0 | runif(1) > 0.99){ \n      stock_count <- stock_count + 1\n      history <- c(history, 0)\n      card <- stock[stock_count]\n    }else{\n      next_idx <- ifelse(length(poss_next) == 1, poss_next, sample(poss_next, 1))\n      idx_played <- c(idx_played, next_idx)\n      history <- c(history, next_idx)\n      card <- board[next_idx]\n      board[next_idx] <- 0\n    }\n  }\n  count <- count + 1\n}\n\nhistory\n```\n\nSo there's a solution! Clear as mud, right? Recall that a 0 in `history` means that a stock card was played, so I can replace those with `stock` vector. If it's not a zero, it represents the index of the `board_orig` vector that was cleared. I need to put that all together and clean things up so I can make a clean visualization of how to win the game.\n\n## Results Cleanup\n\nI'm going to need some help from `dplyr` for data wrangling.\n\n```{r}\nlibrary(dplyr)\n\n```\n\nThe first thing I'm going to do is make a dataframe `df` for the cleaned up results. The `card` column contains all of the cards from the `stock` and `board` vectors. The `pile` column just indicates which of the two vectors the card came from, and `index` is simple the indices of the original two vectors.\n\n```{r}\nboard <- board_orig\n\ndf <- tibble(\n  card = c(stock, board),\n  pile = c(rep(\"stock\", length(stock)), rep(\"board\", length(board))),\n  index = c(1:24, 1:28)\n)\n\nhead(df)\n```\n\nI then create a dataframe `h` to contain the `history` vector and which \"pile\", or vector, the `history` entry refers to. I replace all of the 0s (the `stock` cards) with the order in which they appeared in `stock`, and then I join the two dataframes together.\n\n```{r}\nh <- tibble(\n  index = history,\n  order = 1:52,\n  pile = ifelse(index == 0, \"stock\", \"board\")\n)\n\nh[h$index==0, \"index\"] <- 1:sum(h$index==0)\n\ndf <- df |> left_join(h, by = c(\"pile\", \"index\"))\n\nhead(df)\n```\n\n## Visualization\n\nWhat I want to visualize is something like the game itself, so I found some .png files for each of the cards. Since suits don't matter in TriPeaks, I ignored them from the beginning. It might look a little funny, but I'm just going to display spades for each card. Here I match the card rank with the card image.\n\n```{r}\ndf <-\n  df |> mutate(\n  img = case_when(\n    card == 1 ~ \"playing_cards/ace_of_spades.png\",\n    card == 2 ~ \"playing_cards/2_of_spades.png\",\n    card == 3 ~ \"playing_cards/3_of_spades.png\",\n    card == 4 ~ \"playing_cards/4_of_spades.png\",\n    card == 5 ~ \"playing_cards/5_of_spades.png\",\n    card == 6 ~ \"playing_cards/6_of_spades.png\",\n    card == 7 ~ \"playing_cards/7_of_spades.png\",\n    card == 8 ~ \"playing_cards/8_of_spades.png\",\n    card == 9 ~ \"playing_cards/9_of_spades.png\",\n    card == 10 ~ \"playing_cards/10_of_spades.png\",\n    card == 11 ~ \"playing_cards/jack_of_spades.png\",\n    card == 12 ~ \"playing_cards/queen_of_spades.png\",\n    card == 13 ~ \"playing_cards/king_of_spades.png\"\n  )\n)\nhead(df)\n```\n\nThis next bit took a fair amount of trial and error. What I'm doing is creating `x` and `y` columns that will be used as coordinates for where each card goes on the board. Then I make sure the dataframe is arranged by the order in which the cards were played.\n\n```{r}\n\ndf <-\n  df |> mutate(\n  x = c(24:1, 1:10*1.1, (1:9+0.5)*1.1, c(2,3,5,6,8,9)*1.1, c(2.5, 5.5, 8.5)*1.1),\n  y = c(rep(0.98, 24), \n        rep(1.02, 10),\n        rep(1.04, 9),\n        rep(1.06, 6), \n        rep(1.08, 3))\n)\n\ndf <- df |> arrange(order)\n\nhead(df)\n```\n\nNow I put it all together to make the visual with `ggplot` for the base graphics, and I use `ggimage` to render the cards. The number on top of each card is the order in which the card should be cleared from the board.\n\n```{r}\nlibrary(ggplot2)\nlibrary(ggimage)\n\nggplot(df) +\n  geom_image(aes(x=x, y=y, image=img), size = 0.038, by = \"width\", asp = 2) +\n  geom_label(aes(x=x, y=y, label=order), color=\"red\", \n             fontface=\"bold\", label.size=1) +\n  theme_void() +\n  ylim(0.96, 1.12) +\n  theme(aspect.ratio = 1/2,\n        panel.background = element_rect(fill = 'forestgreen', color = 'forestgreen'))\n```\n\nI made [a Shiny app](https://cxxidemo.shinyapps.io/tripeaks/) that incorporates everything up to this point. For this post, I take it one more level by animating the solution with `gganimate`. First, though, I need to create a dataframe, `df2`, that is structured to support the animation. The first \"frame\" of the animation will display all of the cards. The second frame will show the same thing minus the first cleared card, and so on. So, I need a dataframe with $52 + 51 + 50 + ... + 1 = 1378$ rows. The `map_dfr()` function from the `purrr` package is a nice tool for this. It will bind a 52-row dataframe with a 51-row dataframe with a 50-row dataframe, and so on to produce exactly what I need.\n\n```{r}\nlibrary(purrr)\ndf2 <- 1:52 |> map_dfr(~ df |> slice(.x:52) |> mutate(frame=.x))\nhead(df2)\n```\n\nFinally, I use `gganimate` to create an animated gif as follows.\n\n```{r}\nlibrary(gganimate)\n\nanim <- \n  ggplot(df2) +\n  geom_image(aes(x=x, y=y, image=img), size = 0.038, by = \"width\", asp = 2) +\n  theme_void() +\n  ylim(0.96, 1.12) +\n  theme(aspect.ratio = 1/2,\n        panel.background = element_rect(fill = 'forestgreen', \n                                        color = 'forestgreen')) +\n  transition_time(frame)\n\nanimate(anim, nframes=52, duration=26, width=6, height=3, units=\"in\", res=300)\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","editor":"visual","theme":{"dark":"darkly","light":"flatly"},"title":"Tripeaks Solver","description":"A stochastic method for solving tripeaks games.","author":"John King","date":"7/2/2022","categories":["R","Data Visualization","ggplot2"],"image":"tripeaks.png","code-copy":true},"extensions":{"book":{"multiFile":true}}}}}