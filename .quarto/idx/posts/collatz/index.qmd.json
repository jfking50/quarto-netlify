{"title":"Collatz Conjecture","markdown":{"yaml":{"title":"Collatz Conjecture","description":"Organic structures from number sequences.","author":"John King","date":"5/1/2022","format":{"html":{"toc":true,"code-fold":false,"code-tools":true,"code-copy":true,"df-print":"paged"}},"execute":{"warning":false,"message":false,"echo":true},"categories":["R","ggplot2","generative art"],"image":"teaser.png"},"headingText":"Collatz Conjecture","containsRefs":false,"markdown":"\n\nThe inspiration for a series of posts on generative art was a post I read announcing the `aRtsy` package for producing generative art. A number of the example canvases looked nice, so I installed the package from [the author's GitHub repository](https://github.com/koenderks/aRtsy). The first canvas I tried was `canvas_collatz()`, but for whatever reason, instead of the canvas as shown in the example below, it produced just one wavy line.\n\n![](https://github.com/koenderks/aRtsy/raw/development/png/collatzs/2021-08-08.png){width=\"25%\"}\n\nI looked into the source code in the repo to see if I could tell what was going wrong, but the R scripts were calling functions that I couldn't find. So then I thought, why not just write my own script to create the art?\n\n\nBetween the [Wikipedia page](https://en.wikipedia.org/wiki/Collatz_conjecture) for the Collatz conjecture and the `aRtsy` package description, I thought I had enough to go on. First, I started with generating just one number sequence. The process is this.\n\n1.  Randomly choose a positive integer.\n2.  If it's even, divide by two.\n3.  If it's odd, multiply by three and add one.\n\nRepeat 2 and 3 and keep track of the sequence of numbers. The Collatz conjecture states that no matter what number you start with, the sequence will always reach the number 1. So, once the sequence reaches 1, stop the sequence. Let's do it!\n\n```{r}\nset.seed(1)                # 1 seems appropriate for this problem \n\nn <- sample(2:1000000, 1)  # choose a random number between 2 and one million\nns <- n                    # add it to the sequence\n\nwhile (n > 1){             # stop the sequence when we reach 1 \n  if(n %% 2 == 0){         # check if the number is even\n    n <- n / 2             # divide by 2\n    ns <- c(ns, n)         # add it to the sequence\n  }else{                   # if it's odd\n    n <- 3*n + 1           # do the math\n    ns <- c(ns, n)}        # add it to the sequence\n}\n\nns\n```\n\n## Creating Art\n\nOk, now that I have a sequence of numbers, how do I turn that into a line? According to the description in the GitHub repo, by \"bending the edges differently for even and odd numbers in the sequence\". I wasn't certain exactly meant in terms of code, but my first thought was just to do a little trigonometry and follow these steps:\n\n1.  Reverse the sequence in order to start with 1.\n2.  Also pick a starting angle - I chose 0.\n3.  For the first number (1), assign it the (x, y) coordinates of (0, 0).\n4.  Look at the next number in the sequence.\n5.  If it's even, update the angle by:\n    i)  new angle = old angle + 0.0075\n6.  If it's odd, update the angle by:\n    i)  new angle = old angle - 0.0145\n7.  Calculate the next coordinate by:\n    i)  new x = old x + cos(new angle)\n    ii) new y = old y + sin(new angle)\n\nRepeat steps 3-6 for the rest of the sequence. The following code does the trick.\n\n```{r}\neven_angle = 0.0075 \nodd_angle = 0.0145\n\ndf <- data.frame(n = rev(ns)) # dataframe to store coordinates\n\nangle <- 0\nx <- rep(1, length(ns))       # initialize x coords with 1's\ny <- rep(1, length(ns))       # same for y coords\n\nfor (i in 2:length(ns)){\n  if (ns[i] %% 2 == 0){       # check for even number\n    angle <- angle + even_angle\n    x[i] <- x[i-1] + cos(angle)\n    y[i] <- y[i-1] + sin(angle)\n  }else{\n    angle <- angle - odd_angle\n    x[i] <- x[i-1] + cos(angle)\n    y[i] <- y[i-1] + sin(angle)}\n}\ndf$x <- x\ndf$y <- y\n\nhead(df)\n```\n\nLet's see how that looks in a plot.\n\n```{r}\nlibrary(ggplot2)\n\ntheme_set(theme_bw())\n\nggplot(df) +\n  geom_line(aes(x=x, y=y))\n```\n\nThat looks promising, so now I'll generate 200 sequences the same way. I'll number each sequence 1-200 as I create them and store the sequence number in column named `gp`.\n\n```{r}\nset.seed(1)\n\nfor (i in 1:200){\n  n <- sample(2:1000000, 1)\n  ns <- n\n  \n  while (n > 1){\n    if(n %% 2 == 0){\n      n <- n / 2\n      ns <- c(ns, n)\n    }else{\n      n <- 3*n + 1\n      ns <- c(ns, n)}\n  }\n  ifelse(i == 1, \n         df <- data.frame(n = rev(ns), gp = i), \n         df <- rbind(df, data.frame(n = rev(ns), gp = i)))\n}\n```\n\nNext I generate all of the coordinates for each sequence.\n\n```{r}\ndf$x <- 0\ndf$y <- 0\n\nfor (j in 1:200){\n  angle <- 0\n  sq <- df[df$gp == j, \"n\"]\n  x <- rep(1, length(sq))\n  y <- rep(1, length(sq))\n  for (i in 2:length(sq)){\n    if (sq[i] %% 2 == 0){\n      angle <- angle + even_angle\n      x[i] <- x[i-1] + cos(angle)\n      y[i] <- y[i-1] + sin(angle)\n    }else{\n      angle <- angle - odd_angle\n      x[i] <- x[i-1] + cos(angle)\n      y[i] <- y[i-1] + sin(angle)}\n  }\n  df[df$gp == j, \"x\"] <- x\n  df[df$gp == j, \"y\"] <- y\n}\n\nhead(df)\n```\n\nThis time, instead of `ggplot2`, I'm going to use `plotly` to create the graphic because it might be interesting to zoom in on different parts of the plot. I'm going to hide all of the axis labels, grid lines, etc. so that the final plot looks more like a canvas. I'll also apply the `Spectral` color palette from `RColorBrewer` and make the background black.\n\n```{r}\nlibrary(plotly)\nlibrary(RColorBrewer)\n\nnoax <- list(\n  title = \"\",\n  zeroline = FALSE,\n  showline = FALSE,\n  showticklabels = FALSE,\n  showgrid = FALSE\n)\n\ndf %>% mutate(gp = factor(gp)) %>%\n  plot_ly() %>%\n  add_lines(x=~x, y=~y, color=~gp, colors = colorRampPalette(brewer.pal(11, \"Spectral\"))(200),\n            hoverinfo = \"none\",\n            opacity = 0.5, showlegend = FALSE) %>%\n  layout(xaxis = noax,\n         yaxis = noax,\n         paper_bgcolor = \"#000000\", plot_bgcolor = \"#000000\")\n```\n\nThe images this algorithm generates remind me of feathers, flowers, or grass. Maybe animating the plot would produce an interesting effect.\n\n```{r}\n#| include: false\nlibrary(dplyr)\nlibrary(gganimate)\n\ndf %>% \n  mutate(frame = row_number()) %>%\n  ggplot() +\n  geom_line(aes(x=x, y=y, group=gp, color=factor(gp)), size = 1, alpha=0.5) +\n  scale_fill_distiller(palette = \"Spectral\") +\n  theme_void() +\n  theme(panel.background = element_rect(fill = 'black', color = 'black'),\n        legend.position = \"none\") + \n  transition_reveal(gp)\n\n```\n\n![](collatz.gif)\n\nIt seemed to me that there are a number of knobs one could turn to get different effects, like the seed, the number of sequences, the amount of bend in the lines, and the choice of color palettes. So, I made a [Shiny App](https://cxxidemo.shinyapps.io/genart/) for this and other generative art algorithms.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","editor":"visual","theme":{"dark":"darkly","light":"flatly"},"title":"Collatz Conjecture","description":"Organic structures from number sequences.","author":"John King","date":"5/1/2022","categories":["R","ggplot2","generative art"],"image":"teaser.png","code-copy":true},"extensions":{"book":{"multiFile":true}}}}}